5
0
1
9
72
2
6
6
2
5
3
2
2
9
3
10
4
1
5
9
9
5
1
8
1
6
6
9
6
8
10
10
8
3
8
1
7
6
7
8
10
9
9
1
9
3
3
4
3
7
4
1
3
4
1
5
1
8
5
6
5
6
7
5
1
5
5
7
2
3
4
3
3
5
5
1
7
71
77
10
5
8
2
9
2
2
5
2
10
1
10
6
7
6
10
7
2
7
5
3
9
8
5
2
2
10
2
1
8
8
2
5
6
3
3
9
5
10
2
6
10
1
1
8
7
3
6
8
9
10
1
9
8
7
2
1
8
6
3
6
3
4
2
10
7
4
8
3
5
10
10
5
10
2
2
6
94
8
6
4
7
6
5
6
4
6
9
2
1
1
9
4
5
2
3
3
5
3
7
2
2
6
6
1
7
7
9
3
6
4
6
3
1
10
10
6
8
8
9
8
1
9
3
5
10
6
9
7
8
5
8
1
10
3
3
8
1
1
10
7
6
8
1
8
9
10
4
6
8
2
4
8
1
8
4
10
3
4
8
2
8
5
4
9
7
7
6
10
9
8
6
6
35
6
2
5
5
7
3
4
9
8
3
1
5
8
2
10
1
10
3
10
4
7
8
3
3
6
2
3
5
9
7
1
4
1
7
10
89
1
6
7
8
10
9
3
8
1
4
10
10
6
10
5
2
9
7
6
6
10
1
10
8
9
2
3
9
1
5
10
1
10
6
9
1
7
3
8
7
6
10
8
3
1
2
7
9
1
2
7
10
4
6
10
3
10
2
3
10
6
2
10
7
10
10
8
6
2
7
4
9
6
1
2
8
4
8
7
6
1
3
8
5
10
7
7
1
10
88
89
6
3
2
4
2
1
1
7
5
8
10
3
5
2
6
5
7
5
3
3
6
7
10
2
6
8
10
7
7
8
8
4
10
9
8
3
2
10
9
6
7
10
10
4
1
8
8
10
2
10
2
9
8
3
10
3
10
9
1
8
9
9
2
10
9
1
3
10
10
3
7
9
3
9
4
5
6
1
4
9
2
7
8
9
9
7
3
10
8
66
8
8
6
1
7
4
1
1
6
2
4
2
10
8
2
3
4
7
5
10
6
8
6
5
8
7
3
3
6
10
8
5
7
3
7
6
8
9
6
3
1
1
7
2
10
8
5
4
7
1
5
4
9
10
8
6
8
10
8
6
2
7
10
8
9
9
10
43
7
1
1
9
3
9
1
3
7
5
8
5
5
2
8
5
3
7
3
1
6
2
6
7
9
7
7
9
5
1
7
4
3
8
2
6
6
2
8
4
8
7
10
55
8
7
9
2
5
1
4
1
3
1
9
3
10
7
1
6
8
8
9
2
7
3
7
4
6
6
10
4
2
9
8
1
8
8
5
2
9
8
2
3
1
3
5
10
1
5
5
8
4
6
2
10
8
8
6
#!/bin/python3

import math
import os
import random
import re
import sys

class SinglyLinkedListNode:
    def __init__(self, node_data):
        self.data = node_data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node(self, node_data):
        node = SinglyLinkedListNode(node_data)

        if not self.head:
            self.head = node
        else:
            self.tail.next = node


        self.tail = node

def print_singly_linked_list(node, sep, fptr):
    while node:
        fptr.write(str(node.data))

        node = node.next

        if node:
            fptr.write(sep)

# Complete the findMergeNode function below.

#
# For your reference:
#
# SinglyLinkedListNode:
#     int data
#     SinglyLinkedListNode next
#
#
def findMergeNode(head1, head2):
    #merge = None
    node1 = head1
    node2 = head2
    while node1:
        node2 = head2
        while node2:
            if node1.next == node2.next:
                return node1.next.data
            node2 = node2.next        
        node1 = node1.next

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    tests = int(input())

    for tests_itr in range(tests):
        index = int(input())

        llist1_count = int(input())

        llist1 = SinglyLinkedList()

        for _ in range(llist1_count):
            llist1_item = int(input())
            llist1.insert_node(llist1_item)
            
        llist2_count = int(input())

        llist2 = SinglyLinkedList()

        for _ in range(llist2_count):
            llist2_item = int(input())
            llist2.insert_node(llist2_item)
            
        ptr1 = llist1.head;
        ptr2 = llist2.head;

        for i in range(llist1_count):
            if i < index:
                ptr1 = ptr1.next
                
        for i in range(llist2_count):
            if i != llist2_count-1:
                ptr2 = ptr2.next

        ptr2.next = ptr1

        result = findMergeNode(llist1.head, llist2.head)

        fptr.write(str(result) + '\n')

    fptr.close()